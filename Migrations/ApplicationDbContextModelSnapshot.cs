// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetClinic.Data;

#nullable disable

namespace VetClinic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VetClinic.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dog"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Parrot"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rabbit"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<bool>("isPaid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Cases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2018, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "During a visit to the referring veterinarian 2 months ago, blood work revealed increased liver enzymes. The dog was started on amoxicillin and a liver support supplement but did not improve.",
                            Diagnosis = "The dog has been anorectic, lethargic, and vomiting for several days.",
                            Name = "Dog with anorexia, lethargy, and vomiting",
                            PetId = 1,
                            isPaid = false
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2019, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It can be caused by infection with bacteria, viruses, parasites, medications, or even new foods.",
                            Diagnosis = "refers to inflammation of the gastrointestinal tract.",
                            Name = "Cat stomach virus",
                            PetId = 2,
                            isPaid = false
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Routine examination",
                            Diagnosis = "Routine examination",
                            Name = "Routine examination",
                            PetId = 3,
                            isPaid = false
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Routine examination",
                            Diagnosis = "Routine examination",
                            Name = "Routine examination",
                            PetId = 4,
                            isPaid = false
                        });
                });

            modelBuilder.Entity("VetClinic.Models.CasePetService", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PetServiceId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "PetServiceId");

                    b.HasIndex("PetServiceId");

                    b.ToTable("CasePetServices");

                    b.HasData(
                        new
                        {
                            CaseId = 1,
                            PetServiceId = 2
                        },
                        new
                        {
                            CaseId = 2,
                            PetServiceId = 1
                        },
                        new
                        {
                            CaseId = 3,
                            PetServiceId = 2
                        },
                        new
                        {
                            CaseId = 4,
                            PetServiceId = 3
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Controls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaseId = 1,
                            Date = new DateTime(2018, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dog control after a week",
                            Name = "Dog with anorexia"
                        },
                        new
                        {
                            Id = 2,
                            CaseId = 2,
                            Date = new DateTime(2019, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dog control after a week",
                            Name = "Cat with stomach problem"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Test Address",
                            Email = "joeharris@mail.com",
                            FirstName = "Joe",
                            IdCard = "11AX7",
                            LastName = "Harris",
                            Phone = 653311009
                        },
                        new
                        {
                            Id = 2,
                            Address = "Test Address2",
                            Email = "leon@mail.com",
                            FirstName = "Denis",
                            IdCard = "23NZ0",
                            LastName = "Leon",
                            Phone = 630098754
                        },
                        new
                        {
                            Id = 3,
                            Address = "Test Address3",
                            Email = "neilc@mail.com",
                            FirstName = "Neil",
                            IdCard = "50XE1",
                            LastName = "Carson",
                            Phone = 631002003
                        },
                        new
                        {
                            Id = 4,
                            Address = "Test Address4",
                            Email = "tp4@mail.com",
                            FirstName = "Tom",
                            IdCard = "66OP0",
                            LastName = "Patterson",
                            Phone = 649987632
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RaceId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rex",
                            OwnerId = 1,
                            RaceId = 1,
                            Sex = 1,
                            Year = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jenkins",
                            OwnerId = 3,
                            RaceId = 6,
                            Sex = 1,
                            Year = new DateTime(2011, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Name = "Coco",
                            OwnerId = 2,
                            RaceId = 11,
                            Sex = 1,
                            Year = new DateTime(2010, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tia",
                            OwnerId = 4,
                            RaceId = 13,
                            Sex = 0,
                            Year = new DateTime(2020, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VetClinic.Models.PetService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PetServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "test1 service",
                            Name = "Test1",
                            Price = 100
                        },
                        new
                        {
                            Id = 2,
                            Description = "test2 service",
                            Name = "Test2",
                            Price = 300
                        },
                        new
                        {
                            Id = 3,
                            Description = "test3 service",
                            Name = "Test3",
                            Price = 500
                        },
                        new
                        {
                            Id = 4,
                            Description = "test4 service",
                            Name = "Test4",
                            Price = 1000
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalId = 1,
                            Name = "German Shepherd Dog"
                        },
                        new
                        {
                            Id = 2,
                            AnimalId = 1,
                            Name = "Jack Russell"
                        },
                        new
                        {
                            Id = 3,
                            AnimalId = 1,
                            Name = "Rottweiler"
                        },
                        new
                        {
                            Id = 4,
                            AnimalId = 1,
                            Name = "Boxer"
                        },
                        new
                        {
                            Id = 5,
                            AnimalId = 2,
                            Name = "Persian"
                        },
                        new
                        {
                            Id = 6,
                            AnimalId = 2,
                            Name = "Siamese"
                        },
                        new
                        {
                            Id = 7,
                            AnimalId = 2,
                            Name = "Maine Coon"
                        },
                        new
                        {
                            Id = 8,
                            AnimalId = 2,
                            Name = "Ragdoll"
                        },
                        new
                        {
                            Id = 9,
                            AnimalId = 3,
                            Name = "Ara"
                        },
                        new
                        {
                            Id = 10,
                            AnimalId = 3,
                            Name = "Cockatoo"
                        },
                        new
                        {
                            Id = 11,
                            AnimalId = 3,
                            Name = "Cockatiel"
                        },
                        new
                        {
                            Id = 12,
                            AnimalId = 3,
                            Name = "Macaw"
                        },
                        new
                        {
                            Id = 13,
                            AnimalId = 4,
                            Name = "American"
                        },
                        new
                        {
                            Id = 14,
                            AnimalId = 4,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 15,
                            AnimalId = 4,
                            Name = "Chaudry"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Technician"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Therapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Drug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Therapies");
                });

            modelBuilder.Entity("VetClinic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "testuser1@mail.com",
                            Password = "Test1234*",
                            RoleId = 1,
                            Username = "TestUser1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "testuser@mail.com",
                            Password = "1234Test*",
                            RoleId = 2,
                            Username = "TestUser2"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Vet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Test Vet Address",
                            Email = "wmartin@mail.com",
                            FirstName = "Will",
                            IdCard = "44CM9",
                            LastName = "Martin",
                            Phone = 668764230
                        },
                        new
                        {
                            Id = 2,
                            Address = "Test Vet Address2",
                            Email = "tt40@mail.com",
                            FirstName = "Tim",
                            IdCard = "79MR0",
                            LastName = "Thomas",
                            Phone = 668764231
                        },
                        new
                        {
                            Id = 3,
                            Address = "Test Vet Address3",
                            Email = "johntt@mail.com",
                            FirstName = "John",
                            IdCard = "21YU1",
                            LastName = "Tylor",
                            Phone = 668764232
                        });
                });

            modelBuilder.Entity("VetClinic.Models.VetCase", b =>
                {
                    b.Property<int>("VetId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.HasKey("VetId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("VetCases");

                    b.HasData(
                        new
                        {
                            VetId = 1,
                            CaseId = 1
                        },
                        new
                        {
                            VetId = 3,
                            CaseId = 2
                        },
                        new
                        {
                            VetId = 1,
                            CaseId = 3
                        },
                        new
                        {
                            VetId = 2,
                            CaseId = 4
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Xray", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Xrays");
                });

            modelBuilder.Entity("VetClinic.Models.Case", b =>
                {
                    b.HasOne("VetClinic.Models.Pet", "Pet")
                        .WithMany("Cases")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("VetClinic.Models.CasePetService", b =>
                {
                    b.HasOne("VetClinic.Models.Case", "Case")
                        .WithMany("CasePetServices")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.PetService", "PetService")
                        .WithMany("CasePetServices")
                        .HasForeignKey("PetServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("PetService");
                });

            modelBuilder.Entity("VetClinic.Models.Control", b =>
                {
                    b.HasOne("VetClinic.Models.Case", "Case")
                        .WithMany("Controls")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("VetClinic.Models.Pet", b =>
                {
                    b.HasOne("VetClinic.Models.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.Race", "Race")
                        .WithMany("Pets")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("VetClinic.Models.Race", b =>
                {
                    b.HasOne("VetClinic.Models.Animal", "Animal")
                        .WithMany("Races")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("VetClinic.Models.Therapy", b =>
                {
                    b.HasOne("VetClinic.Models.Case", "Case")
                        .WithMany("Therapies")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("VetClinic.Models.User", b =>
                {
                    b.HasOne("VetClinic.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VetClinic.Models.VetCase", b =>
                {
                    b.HasOne("VetClinic.Models.Case", "Case")
                        .WithMany("VetCases")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.Vet", "Vet")
                        .WithMany("VetCases")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("VetClinic.Models.Xray", b =>
                {
                    b.HasOne("VetClinic.Models.Case", "Case")
                        .WithMany("Xrays")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("VetClinic.Models.Animal", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("VetClinic.Models.Case", b =>
                {
                    b.Navigation("CasePetServices");

                    b.Navigation("Controls");

                    b.Navigation("Therapies");

                    b.Navigation("VetCases");

                    b.Navigation("Xrays");
                });

            modelBuilder.Entity("VetClinic.Models.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("VetClinic.Models.Pet", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("VetClinic.Models.PetService", b =>
                {
                    b.Navigation("CasePetServices");
                });

            modelBuilder.Entity("VetClinic.Models.Race", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("VetClinic.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VetClinic.Models.Vet", b =>
                {
                    b.Navigation("VetCases");
                });
#pragma warning restore 612, 618
        }
    }
}
